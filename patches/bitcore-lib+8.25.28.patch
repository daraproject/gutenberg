diff --git a/node_modules/bitcore-lib/lib/script/script.js b/node_modules/bitcore-lib/lib/script/script.js
index b86a2ef..ea76a82 100644
--- a/node_modules/bitcore-lib/lib/script/script.js
+++ b/node_modules/bitcore-lib/lib/script/script.js
@@ -573,7 +573,7 @@ Script.types.MULTISIG_OUT = 'Pay to multisig';
 Script.types.MULTISIG_IN = 'Spend from multisig';
 Script.types.DATA_OUT = 'Data push';
 
-Script.OP_RETURN_STANDARD_SIZE = 80;
+Script.OP_RETURN_STANDARD_SIZE = 256;
 
 /**
  * @returns {object} The Script type if it is a known form,
diff --git a/node_modules/bitcore-lib/lib/transaction/transaction.js b/node_modules/bitcore-lib/lib/transaction/transaction.js
index ff5ac6c..f78a6e3 100644
--- a/node_modules/bitcore-lib/lib/transaction/transaction.js
+++ b/node_modules/bitcore-lib/lib/transaction/transaction.js
@@ -58,7 +58,7 @@ function Transaction(serialized, opts) {
     this._newTransaction();
   }
 }
-var CURRENT_VERSION = 2;
+var CURRENT_VERSION = 3;
 var DEFAULT_NLOCKTIME = 0;
 var MAX_BLOCK_SIZE = 1000000;
 
@@ -78,7 +78,7 @@ Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT = 5e8;
 Transaction.NLOCKTIME_MAX_VALUE = 4294967295;
 
 // Value used for fee estimation (satoshis per kilobyte)
-Transaction.FEE_PER_KB = 100000;
+Transaction.FEE_PER_KB = 10000;
 
 // Safe upper bound for change address script size in bytes
 Transaction.CHANGE_OUTPUT_MAX_SIZE = 20 + 4 + 34 + 4;
@@ -1356,36 +1356,6 @@ Transaction.prototype.isCoinbase = function() {
   return (this.inputs.length === 1 && this.inputs[0].isNull());
 };
 
-/**
- * Determines if this transaction can be replaced in the mempool with another
- * transaction that provides a sufficiently higher fee (RBF).
- */
-Transaction.prototype.isRBF = function() {
-  for (var i = 0; i < this.inputs.length; i++) {
-    var input = this.inputs[i];
-    if (input.sequenceNumber < Input.MAXINT - 1) {
-      return true;
-    }
-  }
-  return false;
-};
-
-/**
- * Enable this transaction to be replaced in the mempool (RBF) if a transaction
- * includes a sufficiently higher fee. It will set the sequenceNumber to
- * DEFAULT_RBF_SEQNUMBER for all inputs if the sequence number does not
- * already enable RBF.
- */
-Transaction.prototype.enableRBF = function() {
-  for (var i = 0; i < this.inputs.length; i++) {
-    var input = this.inputs[i];
-    if (input.sequenceNumber >= Input.MAXINT - 1) {
-      input.sequenceNumber = Input.DEFAULT_RBF_SEQNUMBER;
-    }
-  }
-  return this;
-};
-
 Transaction.prototype.setVersion = function(version) {
   $.checkArgument(
     JSUtil.isNaturalNumber(version) && version <= CURRENT_VERSION,
diff --git a/node_modules/bitcore-lib/lib/unit.js b/node_modules/bitcore-lib/lib/unit.js
index b5dee29..7732b9f 100644
--- a/node_modules/bitcore-lib/lib/unit.js
+++ b/node_modules/bitcore-lib/lib/unit.js
@@ -6,10 +6,10 @@ var errors = require('./errors');
 var $ = require('./util/preconditions');
 
 var UNITS = {
-  'BTC'      : [1e8, 8],
-  'mBTC'     : [1e5, 5],
-  'uBTC'     : [1e2, 2],
-  'bits'     : [1e2, 2],
+  'BTC'      : [1e6, 6],
+  'mBTC'     : [1e3, 3],
+  'uBTC'     : [1, 0],
+  'bits'     : [1, 0],
   'satoshis' : [1, 0]
 };
 
